/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Blackjack {
  export type GameStruct = {
    timestamp: BigNumberish;
    betAmount: BigNumberish;
    bankHand: string[];
    playerHand: string[];
    status: BigNumberish;
    deck: string[];
  };

  export type GameStructOutput = [
    timestamp: bigint,
    betAmount: bigint,
    bankHand: string[],
    playerHand: string[],
    status: bigint,
    deck: string[]
  ] & {
    timestamp: bigint;
    betAmount: bigint;
    bankHand: string[];
    playerHand: string[];
    status: bigint;
    deck: string[];
  };
}

export interface BlackjackInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bet"
      | "bet(uint256)"
      | "convertFixedArrayToDynamic"
      | "convertFixedArrayToDynamic(string[52])"
      | "countPoints"
      | "countPoints(string[])"
      | "doubleDown"
      | "doubleDown()"
      | "emitCurrentGame"
      | "emitCurrentGame()"
      | "getBankPoints"
      | "getBankPoints()"
      | "getCurrentGame"
      | "getCurrentGame()"
      | "getPlayerPoints"
      | "getPlayerPoints()"
      | "hit"
      | "hit()"
      | "mainContractAddress"
      | "mainContractAddress()"
      | "pass"
      | "pass()"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "onGameUpdate"
      | "onGameUpdate(address,uint256,string[],string[],uint8,uint256)"
  ): EventFragment;

  encodeFunctionData(functionFragment: "bet", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "bet(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFixedArrayToDynamic",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertFixedArrayToDynamic(string[52])",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "countPoints",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "countPoints(string[])",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "doubleDown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doubleDown()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitCurrentGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitCurrentGame()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBankPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBankPoints()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGame",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentGame()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerPoints()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hit", values?: undefined): string;
  encodeFunctionData(functionFragment: "hit()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mainContractAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mainContractAddress()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pass", values?: undefined): string;
  encodeFunctionData(functionFragment: "pass()", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bet", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bet(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertFixedArrayToDynamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertFixedArrayToDynamic(string[52])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "countPoints(string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "doubleDown", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "doubleDown()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCurrentGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCurrentGame()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBankPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBankPoints()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentGame()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerPoints()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hit()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mainContractAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainContractAddress()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pass", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pass()", data: BytesLike): Result;
}

export namespace onGameUpdateEvent {
  export type InputTuple = [
    player: AddressLike,
    arg1: BigNumberish,
    arg2: string[],
    arg3: string[],
    status: BigNumberish,
    arg5: BigNumberish
  ];
  export type OutputTuple = [
    player: string,
    arg1: bigint,
    arg2: string[],
    arg3: string[],
    status: bigint,
    arg5: bigint
  ];
  export interface OutputObject {
    player: string;
    arg1: bigint;
    arg2: string[];
    arg3: string[];
    status: bigint;
    arg5: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Blackjack extends BaseContract {
  connect(runner?: ContractRunner | null): Blackjack;
  waitForDeployment(): Promise<this>;

  interface: BlackjackInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bet: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  "bet(uint256)": TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  convertFixedArrayToDynamic: TypedContractMethod<
    [fixedArray: string[]],
    [string[]],
    "view"
  >;

  "convertFixedArrayToDynamic(string[52])": TypedContractMethod<
    [fixedArray: string[]],
    [string[]],
    "view"
  >;

  countPoints: TypedContractMethod<[playerHand: string[]], [bigint], "view">;

  "countPoints(string[])": TypedContractMethod<
    [playerHand: string[]],
    [bigint],
    "view"
  >;

  doubleDown: TypedContractMethod<[], [void], "nonpayable">;

  "doubleDown()": TypedContractMethod<[], [void], "nonpayable">;

  emitCurrentGame: TypedContractMethod<[], [void], "nonpayable">;

  "emitCurrentGame()": TypedContractMethod<[], [void], "nonpayable">;

  getBankPoints: TypedContractMethod<[], [bigint], "view">;

  "getBankPoints()": TypedContractMethod<[], [bigint], "view">;

  getCurrentGame: TypedContractMethod<[], [Blackjack.GameStructOutput], "view">;

  "getCurrentGame()": TypedContractMethod<
    [],
    [Blackjack.GameStructOutput],
    "view"
  >;

  getPlayerPoints: TypedContractMethod<[], [bigint], "view">;

  "getPlayerPoints()": TypedContractMethod<[], [bigint], "view">;

  hit: TypedContractMethod<[], [void], "nonpayable">;

  "hit()": TypedContractMethod<[], [void], "nonpayable">;

  mainContractAddress: TypedContractMethod<[], [string], "view">;

  "mainContractAddress()": TypedContractMethod<[], [string], "view">;

  pass: TypedContractMethod<[], [void], "nonpayable">;

  "pass()": TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bet"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bet(uint256)"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "convertFixedArrayToDynamic"
  ): TypedContractMethod<[fixedArray: string[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "convertFixedArrayToDynamic(string[52])"
  ): TypedContractMethod<[fixedArray: string[]], [string[]], "view">;
  getFunction(
    nameOrSignature: "countPoints"
  ): TypedContractMethod<[playerHand: string[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "countPoints(string[])"
  ): TypedContractMethod<[playerHand: string[]], [bigint], "view">;
  getFunction(
    nameOrSignature: "doubleDown"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "doubleDown()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emitCurrentGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emitCurrentGame()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBankPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBankPoints()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCurrentGame"
  ): TypedContractMethod<[], [Blackjack.GameStructOutput], "view">;
  getFunction(
    nameOrSignature: "getCurrentGame()"
  ): TypedContractMethod<[], [Blackjack.GameStructOutput], "view">;
  getFunction(
    nameOrSignature: "getPlayerPoints"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPlayerPoints()"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "hit()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "mainContractAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "mainContractAddress()"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pass"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pass()"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "onGameUpdate"
  ): TypedContractEvent<
    onGameUpdateEvent.InputTuple,
    onGameUpdateEvent.OutputTuple,
    onGameUpdateEvent.OutputObject
  >;
  getEvent(
    key: "onGameUpdate(address,uint256,string[],string[],uint8,uint256)"
  ): TypedContractEvent<
    onGameUpdate_address_uint256_string_array_string_array_uint8_uint256_Event.InputTuple,
    onGameUpdate_address_uint256_string_array_string_array_uint8_uint256_Event.OutputTuple,
    onGameUpdate_address_uint256_string_array_string_array_uint8_uint256_Event.OutputObject
  >;

  filters: {
    "onGameUpdate(address,uint256,string[],string[],uint8,uint256)": TypedContractEvent<
      onGameUpdateEvent.InputTuple,
      onGameUpdateEvent.OutputTuple,
      onGameUpdateEvent.OutputObject
    >;
    onGameUpdate: TypedContractEvent<
      onGameUpdateEvent.InputTuple,
      onGameUpdateEvent.OutputTuple,
      onGameUpdateEvent.OutputObject
    >;
  };
}
